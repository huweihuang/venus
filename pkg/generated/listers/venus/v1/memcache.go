/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/huweihuang/venus/pkg/apis/venus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MemcacheLister helps list Memcaches.
// All objects returned here must be treated as read-only.
type MemcacheLister interface {
	// List lists all Memcaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Memcache, err error)
	// Memcaches returns an object that can list and get Memcaches.
	Memcaches(namespace string) MemcacheNamespaceLister
	MemcacheListerExpansion
}

// memcacheLister implements the MemcacheLister interface.
type memcacheLister struct {
	indexer cache.Indexer
}

// NewMemcacheLister returns a new MemcacheLister.
func NewMemcacheLister(indexer cache.Indexer) MemcacheLister {
	return &memcacheLister{indexer: indexer}
}

// List lists all Memcaches in the indexer.
func (s *memcacheLister) List(selector labels.Selector) (ret []*v1.Memcache, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Memcache))
	})
	return ret, err
}

// Memcaches returns an object that can list and get Memcaches.
func (s *memcacheLister) Memcaches(namespace string) MemcacheNamespaceLister {
	return memcacheNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MemcacheNamespaceLister helps list and get Memcaches.
// All objects returned here must be treated as read-only.
type MemcacheNamespaceLister interface {
	// List lists all Memcaches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Memcache, err error)
	// Get retrieves the Memcache from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Memcache, error)
	MemcacheNamespaceListerExpansion
}

// memcacheNamespaceLister implements the MemcacheNamespaceLister
// interface.
type memcacheNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Memcaches in the indexer for a given namespace.
func (s memcacheNamespaceLister) List(selector labels.Selector) (ret []*v1.Memcache, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Memcache))
	})
	return ret, err
}

// Get retrieves the Memcache from the indexer for a given namespace and name.
func (s memcacheNamespaceLister) Get(name string) (*v1.Memcache, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("memcache"), name)
	}
	return obj.(*v1.Memcache), nil
}
